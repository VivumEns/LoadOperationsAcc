
////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Элемент = Элементы.Добавить("Таблица", Тип("ТаблицаФормы"), Элементы.ГруппаТаблицы);
    Элемент.ПутьКДанным = "Таблица";
    
    лТаблица        = ДанныеФормыВЗначение(Таблица         , Тип("ТаблицаЗначений"));
    РедакторКолонок = ДанныеФормыВЗначение(ОписаниеКолонок , Тип("ТаблицаЗначений"));
    
    ПараметрТаблицаЗначений = Неопределено;
	ПараметрАдрес = "";
	Отбор = Неопределено;
    //@skip-check optional-form-parameter-access
    Если Параметры.Свойство("ПараметрТаблицаЗначений", ПараметрТаблицаЗначений) Тогда

		Если ТипЗнч(ПараметрТаблицаЗначений) = Тип("Строка") Тогда
			Попытка
				ПараметрТаблицаЗначений = ЗначениеИзСтрокиВнутр(ПараметрТаблицаЗначений);
			Исключение
				ПараметрТаблицаЗначений = ПолучитьИзВременногоХранилища(ПараметрТаблицаЗначений);
			КонецПопытки; 
        КонецЕсли; 

        Если ТипЗнч(ПараметрТаблицаЗначений) = Тип("ТаблицаЗначений") Тогда
            лТаблица = ПараметрТаблицаЗначений;
            ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
            Для каждого Колонка Из лТаблица.Колонки Цикл
                ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
			КонецЦикла; 
		КонецЕсли;
		
	// вызов из строки пакета
	ИначеЕсли Параметры.Свойство("ПараметрАдрес", ПараметрАдрес) И НЕ ПустаяСтрока(ПараметрАдрес) Тогда
		
		пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
		СтруктураТЗ = пХранилище.СтруктураТЗ;
		
		ТаблицаПакетов = пХранилище.ТаблицаПакетов;
		Отбор = Новый Структура("Адрес", ПараметрАдрес);
		МассивСтрок = ТаблицаПакетов.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		Иначе
		     Строка = МассивСтрок[0];
			 ТекстовыйДокумент.УстановитьТекст(Строка.ТекстМодуля);
		КонецЕсли; 
		
		Если НЕ СтруктураТЗ.Свойство(ПараметрАдрес) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		лТаблица = СтруктураТЗ[ПараметрАдрес];
		ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
		Для каждого Колонка Из лТаблица.Колонки Цикл
			Если Колонка.ТипЗначения.Типы().Найти(Тип("МоментВремени")) <> Неопределено Тогда
			    Колонка_ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, "Строка", "МоментВремени");
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В колонке '" + Колонка.Имя + "' изменён тип с 'МоментВремени' на 'Строка'., т.к. значение с типом 'МоментВремени' не отражается на 'Клиенте'.";
				Сообщение.Сообщить(); 
			Иначе	
			    Колонка_ТипЗначения = Колонка.ТипЗначения;
			КонецЕсли; 
			ДобавитьКолонку(Колонка.Имя, Колонка_ТипЗначения);
		КонецЦикла; 
		
	ИначеЕсли Параметры.Свойство("ПутьКРезультатуЗапроса", Отбор) Тогда
		
		пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
		РезультатЗапроса = пХранилище.СтруктурыРезультатовЗапросовТабДоков[Отбор.ИмяТабДокумента][Отбор.ИмяВыборки];
		
		лТаблица = РезультатЗапроса.Выгрузить();
		
		ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
		Для каждого Колонка Из лТаблица.Колонки Цикл
			ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла; 
		
	ИначеЕсли Параметры.Свойство("ОтборПараметрЗапроса", Отбор) Тогда
		
		// ++ открытие редактора с пустой ТЗ
		//пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
		//ТабПараметров = пХранилище.ТабПараметров;
		//Строкапараметра = ТабПараметров.НайтиСтроки(Отбор)[0];
		//лТаблица = Строкапараметра.Значение;
		Если ЗначениеЗаполнено(Параметры.ОбъектПутьКХранилищу) И (Отбор <> Неопределено) Тогда
			пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
			ТабПараметров = пХранилище.ТабПараметров;
			Строкапараметра = ТабПараметров.НайтиСтроки(Отбор)[0];
			лТаблица = Строкапараметра.Значение;
		Иначе
			лТаблица = Новый ТаблицаЗначений;
		КонецЕсли; 
		// -- открытие редактора с пустой ТЗ
		
		Если НЕ ТипЗнч(лТаблица) = тип("ТаблицаЗначений") Тогда
			лТаблица = Новый ТаблицаЗначений;
		КонецЕсли; 
		
		ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
		Для каждого Колонка Из лТаблица.Колонки Цикл
			ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла; 
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(лТаблица        , Таблица        );
	ЗначениеВДанныеФормы(РедакторКолонок , ОписаниеКолонок);
	
	Элементы.ГруппаРедактораКолонок.Видимость = Ложь;

	СисИнфо = Новый СистемнаяИнформация;
	Объект.ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
		Объект.МодальностьРазрешена = Истина;
	Иначе
		РежимИспользованияМодальности = Метаданные["РежимИспользованияМодальности"];
		РежимИспользованияМодальности_Использовать = Метаданные["СвойстваОбъектов"].РежимИспользованияМодальности.Использовать;
		Объект.МодальностьРазрешена = РежимИспользованияМодальности = РежимИспользованияМодальности_Использовать;
	КонецЕсли;
		
	// ++ открытие редактора с пустой ТЗ
	Элементы.ОтсутствиеТаблицы.Видимость = Элементы.Таблица.ПодчиненныеЭлементы.Количество() = 0;
	// -- открытие редактора с пустой ТЗ

КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьТаблицуИзФайла(Команда)

	Перем ВыбранноеИмя; 
	Перем АдресВременногоХранилища; 
	
	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|Если ПоместитьФайл(АдресВременногоХранилища, ВыбранноеИмя, ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда 
		|	ЗагрузитьТаблицуИзФайлаЗавершение(Истина, АдресВременногоХранилища); 
		|КонецЕсли;";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""ЗагрузитьТаблицуИзФайлаЗавершение"", ЭтаФорма, Истина);
		|НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ВыбранноеИмя, Истина, УникальныйИдентификатор);";
	КонецЕсли;
	
	Выполнить(ТекстКода);

КонецПроцедуры

//@skip-check method-too-many-params
//@skip-check doc-comment-parameter-section
&НаСервере
Процедура ЗагрузитьТаблицуИзФайлаЗавершение(Заглушка = Неопределено, АдресВременногоХранилища = Неопределено, ИмяФайла = Неопределено, Параметры = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	ИмяФайлаРазделенное = СтрРазделить(ИмяФайла, ".");
	РасширениеФайла = ИмяФайлаРазделенное[ИмяФайлаРазделенное.ВГраница()];
	ЭтоЕксель = Ложь;
	Если ИмяФайлаРазделенное.ВГраница() > 0 И Лев(РасширениеФайла, 3) = "xls" Тогда
		ЭтоЕксель = Истина;
	КонецЕсли;
	
	ФайлВХранилище = НЕ АдресВременногоХранилища = Неопределено;
	ФайлНаДиске = НЕ ИмяФайла = Неопределено;
	
	Если ФайлВХранилище Тогда
		Если ЭтоЕксель Тогда
			ПутьНаСервере = ПолучитьИмяВременногоФайла(РасширениеФайла);
		Иначе
			ПутьНаСервере = ПолучитьИмяВременногоФайла();
		КонецЕсли;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьНаСервере);
	ИначеЕсли ФайлНаДиске Тогда
		ПутьНаСервере = ИмяФайла;
		пФайл = Новый Файл(ПутьНаСервере);
		Если НЕ пФайл.Существует() Тогда
	    	Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Указанный файл не найден!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
    РедакторКолонок = ДанныеФормыВЗначение(ОписаниеКолонок, Тип("ТаблицаЗначений"));
	лТаблица.Очистить();
	лТаблица.Колонки.Очистить();
	РедакторКолонок.Очистить();

	Попытка
		Если ЭтоЕксель Тогда
			ПолученноеЗначение = ЗначениеИзФайлаЕксель(ПутьНаСервере);
		Иначе
			ПолученноеЗначение = ЗначениеИзФайла(ПутьНаСервере);
		КонецЕсли;
	Исключение
	    Сообщение = Новый СообщениеПользователю();
	    //@skip-check bsl-legacy-check-static-feature-access
	    Сообщение.Текст = "Ошибка при получении файла! Описание: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	    Сообщение.Сообщить();
	КонецПопытки;
	
	Если ФайлВХранилище Тогда
		УдалитьФайлы(ПутьНаСервере);
	КонецЕсли;

	Если (НЕ ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений")) 
		//ИЛИ (НЕ ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений")) 
	Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Загружаемый файл не является таблицей значений!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	лТаблица = ПолученноеЗначение;
	
	КолКол = Элементы.Таблица.ПодчиненныеЭлементы.Количество();
	МассивУдаляемыхРеквизитов = Новый Массив;
	Пока КолКол > 0 Цикл
		МассивУдаляемыхРеквизитов.Добавить("Таблица." + Элементы.Таблица.ПодчиненныеЭлементы[КолКол - 1].Имя);
		Элементы.Удалить(Элементы.Таблица.ПодчиненныеЭлементы[КолКол - 1]);
		КолКол = КолКол - 1;
	КонецЦикла; 
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов); 
	
	ВывестиКолонкиВРедактор(РедакторКолонок, ПолученноеЗначение.Колонки);
	Для каждого Колонка Из ПолученноеЗначение.Колонки Цикл
		ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла; 

	ЗначениеВДанныеФормы(лТаблица, Таблица);
    ЗначениеВДанныеФормы(РедакторКолонок, ОписаниеКолонок);
		
	// ++ открытие редактора с пустой ТЗ
	Элементы.ОтсутствиеТаблицы.Видимость = Элементы.Таблица.ПодчиненныеЭлементы.Количество() = 0;
	// -- открытие редактора с пустой ТЗ

КонецПроцедуры

&НаСервере
Функция ЗначениеИзФайлаЕксель(ПутьНаСервере)

	РезультатТД = Новый ТабличныйДокумент();
	РезультатТД.Прочитать(ПутьНаСервере, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	Результат = ЧтениеТабличногоДокументаВТаблицуЗначений(РезультатТД);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЧтениеТабличногоДокументаВТаблицуЗначений(ДанныеВТабличномДокументе)

    ПоследняяСтрока = ДанныеВТабличномДокументе.ВысотаТаблицы;
    ПоследняяКолонка = ДанныеВТабличномДокументе.ШиринаТаблицы;
    ОбластьЯчеек = ДанныеВТабличномДокументе.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
    ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
    ПостроительОтчета = Новый ПостроительОтчета;
    ПостроительОтчета.ИсточникДанных = ИсточникДанных;
    ПостроительОтчета.Выполнить();
    Результат = ПостроительОтчета.Результат.Выгрузить();

    Возврат Результат

КонецФункции

&НаКлиенте
Процедура СохранитьТаблицуВФайл(Команда)

	Режим = РежимДиалогаВыбораФайла.Сохранение;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
    ДиалогОткрытияФайла.ПолноеИмяФайла = "";
    Фильтр = "Текст(*.txt)|*.txt";
    ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл";

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьТаблицуВФайлЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьТаблицуВФайлЗавершение"", ЭтаФорма, Неопределено);
		|ДиалогОткрытияФайла.Показать(Оповещение);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТаблицуВФайлЗавершение(Путь, Параметры) Экспорт
	
	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		пПутьКФайлу = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		пПутьКФайлу = Путь[0];
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Ошибка в имени сохранении файла!";
		Сообщение.Сообщить();
	КонецЕсли; 
////////////////////////////////////////////////////////////
	Адрес = ПолучитьФайл_();
	Описание = Новый ОписаниеПередаваемогоФайла(пПутьКФайлу, Адрес);
	МассивОписаний = Новый Массив;
	МассивОписаний.Добавить(Описание);
	
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ПолучитьФайлы(МассивОписаний, , , Ложь);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранениеФайлаНаДиск"", ЭтаФорма, Неопределено);
		|НачатьПолучениеФайлов(Оповещение, МассивОписаний, , Ложь);";
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайл_()
	
	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
	
	ПутьНаСервере = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ПутьНаСервере, лТаблица);

	Двоичное = Новый ДвоичныеДанные(ПутьНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	УдалитьФайлы(ПутьНаСервере);
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура СохранениеФайлаНаДиск(ПолученныеФайлы, Параметры) Экспорт
	// Не удалять!
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКолонки(Команда)
	
	Режим =  НЕ Элементы.ФормаРедактироватьКолонки.Пометка;
	Элементы.ФормаРедактироватьКолонки.Пометка = Режим;
	Элементы.ГруппаРедактораКолонок.Видимость = Режим;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьТекстЗапросаКТЧ(Команда)
	
	ТЗ = "ТЗ";
	ИмяВТ = "ВТ";
	ТекствЫБРАТЬ = "ВЫБРАТЬ";
	ТекстПолей = "";
	
	Для каждого Строка Из ОписаниеКолонок Цикл
		ТекстПолей = ТекстПолей + ?(ТекстПолей = "", "", ",") + Символы.ПС + "	" + ТЗ + "." + Строка.ИмяКолонки; 
	КонецЦикла;
	
	ТекстХвоста = Символы.ПС + "ПОМЕСТИТЬ " + ИмяВТ + Символы.ПС + "ИЗ" + Символы.ПС + "	&" + ТЗ + " КАК " + ТЗ;
	
	ТекстЗапроса = ТекствЫБРАТЬ + ТекстПолей + ТекстХвоста;
	
	ТекстовыйДокумент.ДобавитьСтроку(ТекстЗапроса);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ МОДУЛЯ

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	
	ВыполнитьКодСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодСервер()

	Результат = Таблица;
	Выполнить(ТекстовыйДокумент.ПолучитьТекст());
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПроведенияДокументов(Команда)

	Текст = 
	"Для каждого Строка из Результат Цикл
	|
	|	ДокОбъект = Строка.Ссылка.ПолучитьОбъект();
	|	ДокОбъект.ОбменДанными.Загрузка = Истина;
	|	Попытка
	|		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	|		//Строка.Готово = Истина;
	|	Исключение
	|		Сообщить(""Ошибка! ""+ Строка(ДокОбъект));
	|	КонецПопытки;
	|
	|КонецЦикла;
	|
	|Сообщить(""Готово!"");
	|";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстЦикла(Команда)

	Текст = 
	"Для каждого Строка из Результат Цикл
	|
	|	//ОбработкаПрерыванияПользователя();
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПолученияУникальногоИдентификатора(Команда)

	Текст = 
	"Для каждого Строка из Результат Цикл
	|
	|	пСсылка = Строка.Ссылка;
	|
	|	УИ = пСсылка.УникальныйИдентификатор();
	|	Сообщить(Строка(пСсылка.Ссылка) + "": "" + УИ);
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПолученияУникальногоИдентификатора_ДобавитьКолонкуВТЗ(Команда)
	
	СоздатьКолонкуУИ();

	Текст = 
	"Для каждого Строка из Результат Цикл
	|
	|	пСсылка = Строка.Ссылка;
	|
	|	Строка.УИ = пСсылка.УникальныйИдентификатор();
	|	//Сообщить(Строка(пСсылка.Ссылка) + "": "" + УИ);
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);	

КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкуУИ()

	Табл = РеквизитФормыВЗначение("Таблица");
	Если Табл.Колонки.Найти("УИ") = Неопределено Тогда
		ДобавитьКолонку("УИ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	КонецЕсли; 

КонецПроцедуры // ПроверитьНаличиеКолонки()

&НаКлиенте
Процедура СоздатьТекстОбработкиДвиженийРегистраБухгалтерии(Команда)

	Текст = 
	"Для каждого Строка из Результат Цикл
	|
	|//	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	|//	НаборЗаписей.Отбор.Регистратор.Установить(Строка.Ссылка);
	|//	НаборЗаписей.Прочитать();   
	|//	
	|//	Если НаборЗаписей.Количество() = 0 Тогда
	|//		Возврат;
	|//	КонецЕсли;
	|//	
	|//	Для каждого Запись из НаборЗаписей Цикл
	|//		
	|//		Если Запись.СчетДт.НалоговыйУчет Тогда
	|//			Запись.СуммаНУДт = Запись.Сумма;
	|//		КонецЕсли;
	|//		Если Запись.СчетКт.НалоговыйУчет Тогда
	|//			Запись.СуммаНУКт = Запись.Сумма;
	|//		КонецЕсли;
	|//		
	|//	КонецЦикла;
	|//	
	|//	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	|//	НаборЗаписей.Записать();
	|//	
	|//	ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
	|//	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	|//	ДокументОбъект.РучнаяКорректировка   = Истина;
	|//	ДокументОбъект.Комментарий   = ""#Добавлено подразделение внешней обработкой. "" + ДокументОбъект.Комментарий;
	|//	ДокументОбъект.Записать();
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПометкиНаУдаление(Команда)

	Текст = 
	"Для каждого Строка из Результат Цикл
	|
	|	ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
	|	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	|	ДокументОбъект.УстановитьПометкуУдаления(ИСТИНА);
	|	//Сообщить(Строка(ДокОбъект));
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);	

КонецПроцедуры



&НаКлиенте
Процедура ОчиститьТекстМодуля(Команда)
	
	ТекстовыйДокумент.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	НачалоСтроки = 0; НачалоКолонки = 0; КонецСтроки = 0; КонецКолонки = 0;
	Элементы.ТекстовыйДокумент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	лТекстовыйДокумент = Новый ТекстовыйДокумент;
	лТекстовыйДокумент.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());
	
	ПоследняяСтрока = лТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;
	
	МаксимальныйОтступ = 0;
	МинимальныйОтступ = 0;
	Для i = НачалоСтроки По КонецСтроки Цикл
		Строка = лТекстовыйДокумент.ПолучитьСтроку(i);
		Строка = СтрЗаменить(Строка, "  ", "    ");
		СимволовСлева = СтрНайти(Строка, СокрЛП(Строка));
		МаксимальныйОтступ = Макс(СимволовСлева, МаксимальныйОтступ);
		МинимальныйОтступ = ?(МинимальныйОтступ = 0, МаксимальныйОтступ, МинимальныйОтступ);
		МинимальныйОтступ  = Мин(МаксимальныйОтступ, МинимальныйОтступ );
	КонецЦикла;
	
	ТексДляВыделения = "";
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1); 
	Для i = НачалоСтроки По КонСтроки Цикл
		Строка = лТекстовыйДокумент.ПолучитьСтроку(i);
		Строка = СтрЗаменить(Строка, "  ", "    ");
		Строка = Лев(Строка, МинимальныйОтступ-1) + "//" + Сред(Строка, МинимальныйОтступ);
		лТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
		ТексДляВыделения = ТексДляВыделения + Символы.ПС + Строка;
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(лТекстовыйДокумент.ПолучитьТекст());
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстовыйДокумент;
	ЭтаФорма.ОбновитьОтображениеДанных();    
	Элементы.ТекстовыйДокумент.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1); 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
		
    Текст = ТекстовыйДокумент.ПолучитьТекст();
    
    НачалоСтроки = 0; НачалоКолонки = 0; КонецСтроки = 0; КонецКолонки = 0;
    Элементы.ТекстовыйДокумент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);		
    
    лТекстовыйДокумент = Новый ТекстовыйДокумент;
    лТекстовыйДокумент.УстановитьТекст(Текст);
	
	ПоследняяСтрока = лТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;
    
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1); 
    Для i = НачалоСтроки По КонСтроки Цикл
        Строка = лТекстовыйДокумент.ПолучитьСтроку(i);
        Вхождение = СтрНайти(Строка, "//");
        Если Вхождение > 0 Тогда
            Строка = Лев(Строка, Вхождение-1) + Сред(Строка, Вхождение + 2);
        КонецЕсли; 
        лТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
    КонецЦикла;
    
    ТекстовыйДокумент.УстановитьТекст(лТекстовыйДокумент.ПолучитьТекст());
	ЭтаФорма.ТекущийЭлемент = Элементы.ТекстовыйДокумент;
	ЭтаФорма.ОбновитьОтображениеДанных();    
    Элементы.ТекстовыйДокумент.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1);

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ НИЖНЕЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	
	ПутьКХранилищу = Неопределено;
	ПередатьРезультат(ПутьКХранилищу);
	Закрыть(ПутьКХранилищу);

КонецПроцедуры

&НаСервере
Процедура ПередатьРезультат(ПутьКХранилищу)
    
	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
	ПутьКХранилищу = ПоместитьВоВременноеХранилище(лТаблица);
    
КонецПроцедуры // ПередатьРезультат()

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#Область ОбработчикиСобытийТабличнойЧастиРедактораКолонок
////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РЕДАКТОРА КОЛОНОК

&НаКлиенте
Процедура ОписаниеКолонокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
	
		Элемент.ТекущиеДанные.ИсходноеИмяКолонки = "";
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = ОписаниеКолонок.НайтиПоИдентификатору(Элементы.ОписаниеКолонок.ТекущаяСтрока);
	УдалитьКолонку(ТекущаяСтрока.ИмяКолонки, ТекущаяСтрока.ИсходноеИмяКолонки);
	ОписаниеКолонок.Удалить(ОписаниеКолонок.НайтиПоИдентификатору(ТекущаяСтрока.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонку(Имя, ИсходноеИмяКолонки)

	Если ИсходноеИмяКолонки = "" Тогда
		Возврат;
	КонецЕсли; 

	ИмяПоиска = ?(ИсходноеИмяКолонки = "", Имя, ИсходноеИмяКолонки);
	
    лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
    Колонка = лТаблица.Колонки.Найти(ИмяПоиска);
	КолонкиНет = Колонка = Неопределено;
	Если КолонкиНет Тогда
         Возврат;
	КонецЕсли; 
	ЗначениеВДанныеФормы(лТаблица, Таблица);
	
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Таблица." + ИсходноеИмяКолонки);
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов); 

	УдаляемыйЭлемент = Элементы.Найти(ИсходноеИмяКолонки);
	Элементы.Удалить(УдаляемыйЭлемент);

КонецПроцедуры 

&НаКлиенте
Процедура ОписаниеКолонокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТекущаяСтрока = Элементы.ОписаниеКолонок.ТекущаяСтрока;
	РедактироватьКолонку(ТекущаяСтрока, Отказ);

КонецПроцедуры

// ++ открытие редактора с пустой ТЗ
&НаКлиенте
Процедура ОписаниеКолонокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Элементы.ОтсутствиеТаблицы.Видимость = Элементы.Таблица.ПодчиненныеЭлементы.Количество() = 0;
	
КонецПроцедуры
// -- открытие редактора с пустой ТЗ
#КонецОбласти


////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиКолонкиВРедактор(РедакторКолонок, Колонки)

    РедакторКолонок.Очистить();
    Для каждого Колонка Из Колонки Цикл
    
    	НоваяСтрока = РедакторКолонок.Добавить();
        НоваяСтрока.ИмяКолонки = Колонка.Имя;
        НоваяСтрока.ТипДанных = Колонка.ТипЗначения;
        НоваяСтрока.ИсходноеИмяКолонки = Колонка.Имя;
    
    КонецЦикла; 
    
КонецПроцедуры // ВывестиКолонкиВРедактор()

&НаСервере
Процедура ДобавитьКолонку(Имя, ТипЗначения)

	МассивДобавляемыхРеквизитов = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(Имя, ТипЗначения, "Таблица", Имя); 
	МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Элемент = Элементы.Добавить(Имя, Тип("ПолеФормы"), Элементы.Таблица); 
	Элемент.ПутьКДанным = "Таблица." + Имя;
	Элемент.Вид = ВидПоляФормы.ПолеВвода;

КонецПроцедуры

&НаСервере
Процедура РедактироватьКолонку(ТекущаяСтрока, Отказ)

	ТекСтрока = ОписаниеКолонок.НайтиПоИдентификатору(ТекущаяСтрока);
	Отбор = Новый Структура("ИмяКолонки,ТипДанных,ИсходноеИмяКолонки", ТекСтрока.ИмяКолонки, ТекСтрока.ТипДанных, ТекСтрока.ИсходноеИмяКолонки);
	
	пОписаниеКолонок = РеквизитФормыВЗначение("ОписаниеКолонок", Тип("ТаблицаЗначений"));
	пТекСтрока = пОписаниеКолонок.НайтиСтроки(Отбор)[0];
	
	Имя                = пТекСтрока.ИмяКолонки;
	ТипЗначения        = пТекСтрока.ТипДанных;
	ИсходноеИмяКолонки = пТекСтрока.ИсходноеИмяКолонки;

	Для каждого пСтрока Из пОписаниеКолонок Цикл
		
		Если пОписаниеКолонок.Индекс(пСтрока) = пОписаниеКолонок.Индекс(пТекСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		Если пСтрока.ИмяКолонки = пТекСтрока.ИмяКолонки Тогда
			пТекСтрока.ИмяКолонки = пТекСтрока.ИмяКолонки + "_";
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Отказ! Такое имя поля уже есть!";
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
	
	КонецЦикла; 

	ИмяПоиска = ?(ИсходноеИмяКолонки = "", Имя, ИсходноеИмяКолонки);
	
    лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
    Колонка = лТаблица.Колонки.Найти(ИмяПоиска);
	КолонкиНет = Колонка = Неопределено;
	Если НЕ КолонкиНет Тогда
		ИсходныеДанныеКолонки = лТаблица.ВыгрузитьКолонку(Колонка);
	КонецЕсли; 
	ЗначениеВДанныеФормы(лТаблица, Таблица);
	
	Если КолонкиНет Тогда
        МассивДобавляемыхРеквизитов = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы(Имя, ТипЗначения, "Таблица", Имя); 
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 
        ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
        
        Элемент = Элементы.Добавить(Имя, Тип("ПолеФормы"), Элементы.Таблица); 
        Элемент.ПутьКДанным = "Таблица." + Имя;
        Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Иначе
		
		Если (Колонка.ТипЗначения = ТипЗначения) И (ИсходноеИмяКолонки = Имя) Тогда
			Возврат;
		КонецЕсли;
		
		ИзменилсяТип = НЕ Колонка.ТипЗначения = ТипЗначения;
		ИзменилосьИмя = НЕ ИсходноеИмяКолонки = Имя;
		
		Если НЕ ИзменилосьИмя Тогда
			
			МассивУдаляемыхРеквизитов = Новый Массив;
			МассивУдаляемыхРеквизитов.Добавить("Таблица." + ИсходноеИмяКолонки);
			ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов); 
			
			МассивДобавляемыхРеквизитов = Новый Массив;
			РеквизитФормы = Новый РеквизитФормы(Имя + "_", ТипЗначения, "Таблица", Имя + "_"); 
			МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
			ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, ); 
			
			УдаляемыйЭлемент = Элементы.Найти(ИсходноеИмяКолонки);
			
			Элемент = Элементы.Вставить(Имя + "_", Тип("ПолеФормы"), Элементы.Таблица, УдаляемыйЭлемент); 
			Элемент.ПутьКДанным = "Таблица." + Имя + "_";
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			
			Элементы.Удалить(УдаляемыйЭлемент);
			
			ИсходноеИмяКолонки = Имя + "_";
			
		КонецЕсли;
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("Таблица." + ИсходноеИмяКолонки);
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов); 
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы(Имя, ТипЗначения, "Таблица", Имя); 
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, ); 

		УдаляемыйЭлемент = Элементы.Найти(ИсходноеИмяКолонки);
		
		Элемент = Элементы.Вставить(Имя, Тип("ПолеФормы"), Элементы.Таблица, УдаляемыйЭлемент); 
		Элемент.ПутьКДанным = "Таблица." + Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		
		Элементы.Удалить(УдаляемыйЭлемент);
        
		лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
		Колонка = лТаблица.Колонки.Найти(Имя);
		лТаблица.ЗагрузитьКолонку(ИсходныеДанныеКолонки, Колонка);
		ЗначениеВДанныеФормы(лТаблица, Таблица);
		
	КонецЕсли;
	
	пТекСтрока.ИсходноеИмяКолонки = пТекСтрока.ИмяКолонки;
	ЗначениеВДанныеФормы(пОписаниеКолонок, ОписаниеКолонок);

КонецПроцедуры // РедактироватьКолонку()

&НаКлиенте
Функция ПолучитьПутьСохраненияФайла()
    
    Режим = РежимДиалогаВыбораФайла.Сохранение;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
    ДиалогОткрытияФайла.ПолноеИмяФайла = "";
//    Текст = "ru = ""Текст""; en = ""Text""";
//    Фильтр = НСтр(Текст)+"(*.txt)|*.txt";
    Фильтр = "Текст(*.txt)|*.txt";
    ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл";
    Если ДиалогОткрытияФайла.Выбрать() Тогда
        Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
    
КонецФункции // ПолучитьПутьСохраненияФайла()

&НаКлиенте
Функция ПолучитьПутьЗагружаемогоФайла()
    
    Режим = РежимДиалогаВыбораФайла.Открытие;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
    ДиалогОткрытияФайла.ПолноеИмяФайла = "";
//    Текст = "ru = ""Текст""; en = ""Text""";
//    Фильтр = НСтр(Текст)+"(*.txt)|*.txt";
    Фильтр = "Текст(*.txt)|*.txt";
    ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл";
    Если ДиалогОткрытияФайла.Выбрать() Тогда
        Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
    
КонецФункции // ПолучитьПутьЗагружаемогоФайла()

&НаСервере
Функция ПолучитьИмяОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
КонецФункции
#КонецОбласти 


